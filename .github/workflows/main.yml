on: [push]

# TODO: TripleCheck + DocFX + canary

jobs:
  #########
  # BUILD #
  #########

  build:
    runs-on: ubuntu-latest
    name: Build, package, and test
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: |
          npx eslint './src/**/*.ts' --quiet --fix
          npx prettier ./src --check
      - name: Compile
        run: npx tsc
      - name: Package
        run: npx sls package
      - name: Test
        run:  npm test

  gitleaks:
    needs: [build]
    runs-on: ubuntu-latest
    name: Gitleaks
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2

  licenses:
    needs: [build]
    runs-on: ubuntu-latest
    name: License compliance
    steps:
      - uses: actions/checkout@v3
      - name: License compliance check
        uses: mikaelvesavuori/license-compliance-action@v1.0.2

  spectral:
    needs: [build]
    runs-on: ubuntu-latest
    name: Spectral
    steps:
      - uses: actions/checkout@v3
      - run: "printf '{\n  \"extends\": [\"spectral:oas\", \"spectral:asyncapi\"]\n}\n' >.spectral.json"
      - uses: stoplightio/spectral-action@latest
        with:
          file_glob: 'api/*.json'

  trivy:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    name: Trivy vulnerability scanner
    steps:
      - uses: actions/checkout@v3
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  checkov:
    needs: [build]
    name: Checkov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: src/
          quiet: true # optional: display only failed checks
          soft_fail: true # optional: do not return an error code if there are failed checks
          output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif

  ###########
  # RELEASE #
  ###########

  deploy-test:
    needs: [build, gitleaks, licenses, spectral, trivy, checkov] # alex, infracost
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    name: Deploy to test
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-north-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_TEST }}
          role-session-name: OIDCSession
      - name: Deploy to test
        run: npm run deploy:test

  live-tests:
    needs: [deploy-test]
    name: Run live tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run live tests
        run: |
          npm run deploy:test
          npm run test:smoke
          npm run test:integration
          npm run test:load
          npm run test:canary
          npm run teardown:test

  deploy-prod:
    needs: [live-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    name: Deploy to production
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-north-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          role-session-name: OIDCSession
      - name: Deploy to production
        run: npm run deploy

  dorametrix:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    name: Dorametrix
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: dorametrix
        uses: mikaelvesavuori/dorametrix-action@v1.0.0
        with:
          endpoint: ${{ secrets.DORAMETRIX_ENDPOINT }}
          api-key: ${{ secrets.DORAMETRIX_API_KEY }}

  ############
  # DOCUMENT #
  ############

  docs:
    needs: [dorametrix]
    runs-on: ubuntu-latest
    name: Publish docs
    steps:
      - uses: actions/checkout@v3
      - name: Publish docs
        uses: mikaelvesavuori/documentarian-action@v1.0.0
        with:
          schema_path: api/asyncapi.json
          #catalogist_endpoint: ${{ secrets.CATALOGIST_ENDPOINT }}
          #catalogist_api_key: ${{ secrets.CATALOGIST_API_KEY }}
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_auth_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare_project_name: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          #cloudflare_catalog_name: eventcatalog